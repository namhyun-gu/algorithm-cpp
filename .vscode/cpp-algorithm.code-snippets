{
	// Place your learning-algorithm 작업 영역 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"main with iostream": {
		"scope": "cpp",
		"prefix": "iomain",
		"body": [
			"#include <iostream>",
			"main() {$1}"
		]
	},
	"print console": {
		"scope": "cpp",
		"prefix": "print",
		"body": [
			"cout << $1 << endl;"
		]
	},
	"print vect": {
		"scope": "cpp",
		"prefix": "printvec",
		"body": [
			"for (auto i : $1)",
			"  cout << i << \" \";",
			"cout << endl;",
			""
		]
	},
	"init vector": {
		"scope": "cpp",
		"prefix": "initvect",
		"body": [
			"vector<$1>{$2}"
		]
	},
	"function": {
		"scope": "cpp",
		"prefix": "func",
		"body": [
			"$1 $2($3) {",
			"  $4",
			"}"
		]
	},
	"for each": {
		"scope": "cpp",
		"prefix": "foreach",
		"body": [
			"for ($1 : $2) {",
			"  $3",
			"}"
		]
	},
	"for i": {
		"scope": "cpp",
		"prefix": "fori",
		"body": [
			"for (int $1 = 0; $1 < $2; $1++) {",
			"  $3",
			"}"
		]
	}
}